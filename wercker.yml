box: node:6.10
build:
  steps:
    - script:
        name: A step that executes `npm install` command
        code: npm install  
    - script:
        name: Create TLS key and cert
        code: openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=nginxsvc/O=nginxsvc"

push-to-releases:
  steps:
    # Push to public docker repo Container Registry (CR)
    - internal/docker-push:
        tag: $WERCKER_GIT_BRANCH-$WERCKER_GIT_COMMIT
        cmd: node /pipeline/source/app.js

deploy-to-oke:
  box:
        id: alpine
        cmd: /bin/sh
  steps:
    - bash-template
    
    - script:
        name: "Visualise Kubernetes config"
        code: cat kubernetes-deployment.yml
        
    - kubectl:
        name: create OCR secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create secret docker-registry wrelease --docker-server=wcr.io --docker-username=$WERCKER_APPLICATION_OWNER_NAME --docker-password=$KUBERNETES_TOKEN --docker-email=${WERCKER_APPLICATION_OWNER_NAME}@mail.com

    - kubectl:
        name: create TLS secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create secret tls tls-secret --key $WERCKER_ROOT/tls.key --cert $WERCKER_ROOT/tls.crt 
        
    - kubectl:
        name: create deplyoment
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create -f $WERCKER_ROOT/kubernetes-deployment.yml 

    - script:
        name: "Visualise Ingress config"
        code: cat ingress.yml

    - kubectl:
        name: create Ingress configuration
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create -f $WERCKER_ROOT/ingress.yml 

testapp:
  steps:
    - script:
        name: Run and Test microservice
        code: |
              mkdir -p "/pipeline"
              node $WERCKER_ROOT/app.js &
              sleep 10
              CREDITSCORE_URL=http://localhost:3000/creditscore
              echo 'Microservice URL=' $CREDITSCORE_URL
              if curl -X POST -H "Content-Type: application/json" -X POST -d '{"firstname":"John","lastname":"Doe","dateofbirth":"01/01/2015","ssn":"111223333"}' $CREDITSCORE_URL | grep "firstname"
              then
                  # if the keyword is in the conent
                  echo "Test passed"
              else
                  echo "Test failed"
                  exit -1
              fi
              sleep 2

ui-functional-test:
  box:
    id: peternagy/wercker-protractor-headless:chrome59-1
  steps:
    - script:
        name: Run application and test UI
        code: |
              nohup node $WERCKER_ROOT/app.js > creditscoreapp.log &
              echo 'Microservice URL to test: http://localhost:3000/creditscore'
              protractor $WERCKER_ROOT/test/protractor.conf.js
              echo 'CreditScore app log:::'
              cat creditscoreapp.log
              echo 'CreditScore app log :::END'

